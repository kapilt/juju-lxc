Quite alot of this is personal setup and works for me, its not productized yet 
for end users. but i've tried  to automate the bulk in hopes that it will help 
you guys get started. I've dropped an ansible ec2.yaml playbook file into jlxc 
tools that automates 90% of the setup.

grab a checkout of https://github.com/kapilt/juju-lxc

edit ec2.yml tweak instance_type, region, key, and trusty_image to taste. The 
trusty image is currently a daily from 4/2/2014. You  must tweak session_id if 
sharing accounts or destroying server... its there for idempotent requests on 
ec2 server creation.

ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -v ec2.yml

after that  on the instance (use ipaddress from ansible output to ssh in)

lxc-clone -s -B btrfs precise-template myenv-boot 
sudo lxc-start -d -n myenv-boot
sudo lxc-ls --fancy --running | grep myenv-boot

grab ip address

construct environments.yaml

  environments:
     myenv:
        type: manual
        bootstrap-user: ubuntu
        bootstrap-host: $ip_address
        apt-http-proxy: 10.0.3.1

juju bootstrap -v --debug

add 5 trusty containers

jlxc-add -n 5 -b trusty-template --series=trusty -e myenv

add 5 precise containers (precise is series default atm)

jlxc-add -n 5 -b precise-template -e myenv

jlxc-destroy -e myenv  will wipe all containers but the bootstrap from the 
environment.. 

For ftesting charms or setting up dev environments. i typically do a reset.sh 
script with

jlxc-destroy -e myenv
juju-deployer -TW  # to clear out extraneous services with no untis
jlxc-add -n 8  -e myenv -b precise-template


and then either run juju-deployer again with a workload or use env as desired.
